// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ production
if (process.env.NODE_ENV !== 'production') {
    import('dotenv/config')
}

import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js'
import { SSEServerTransport } from '@modelcontextprotocol/sdk/server/sse.js'
import { z } from 'zod'
import express from 'express'
import cors from 'cors'

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Telegram —Ñ—É–Ω–∫—Ü–∏–∏
import * as telegramApi from './telegram-functions/messages.js'

// Create an MCP server
const server = new McpServer({
    name: 'Telegram MCP Server',
    version: '1.0.0',
})

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
server.tool(
    'sendTelegramMessage',
    '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram',
    {
        text: z.string().describe('–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏'),
    },
    async ({ text }) => {
        try {
            const result = await telegramApi.sendMessage(text)
            return {
                content: [
                    { type: 'text' as const, text: JSON.stringify(result, null, 2) },
                ],
            }
        } catch (error) {
            return {
                content: [
                    {
                        type: 'text' as const,
                        text: `–û—à–∏–±–∫–∞: ${
                            error instanceof Error ? error.message : String(error)
                        }`,
                    },
                ],
            }
        }
    },
)

// –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express()
const PORT = 8080

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CORS
app.use(
    cors({
        origin: '*',
        methods: ['GET', 'POST', 'OPTIONS'],
        allowedHeaders: ['Content-Type', 'Authorization'],
    }),
)

// –û–±—Å–ª—É–∂–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
app.get('/', (req, res) => {
    res.json({
        name: 'Telegram MCP Server',
        version: '1.0.0',
        status: 'running',
        endpoints: {
            sse: '/sse',
        },
    })
})

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –ø–æ —Å–µ—Å—Å–∏—è–º
const transports = new Map<string, SSEServerTransport>()

// SSE endpoint –¥–ª—è MCP - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
app.get('/sse', async (req, res) => {
    console.log('–ù–æ–≤–æ–µ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')

    try {
        const transport = new SSEServerTransport('/message', res)
        const sessionId = `session_${Date.now()}_${Math.random()}`
        transports.set(sessionId, transport)

        // –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        res.on('close', () => {
            transports.delete(sessionId)
            console.log(`‚ùå SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ${sessionId} –∑–∞–∫—Ä—ã—Ç–æ`)
        })

        await server.connect(transport)
        console.log(`‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ SSE (—Å–µ—Å—Å–∏—è: ${sessionId})`)
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è SSE:', error)
        res.status(500).json({ error: 'Failed to establish SSE connection' })
    }
})

// POST endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
app.post('/message', async (req, res) => {
    console.log('–ü–æ–ª—É—á–µ–Ω–æ POST —Å–æ–æ–±—â–µ–Ω–∏–µ:', req.body)

    try {
        // –ò—â–µ–º –ª—é–±–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        const activeTransport = Array.from(transports.values())[0]

        if (!activeTransport) {
            return res.status(400).json({
                error: 'No active SSE connection found',
            })
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º POST —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        await activeTransport.handlePostMessage(req, res)
        console.log('‚úÖ POST —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ')
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ POST —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
        res.status(500).json({ error: 'Failed to handle POST message' })
    }
})

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
app.listen(PORT, () => {
    console.log(`üöÄ Telegram MCP Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`)
    console.log(`üì° SSE endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:${PORT}/sse`)
    console.log(`üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–∞—à MCP –∫–ª–∏–µ–Ω—Ç –Ω–∞: http://localhost:${PORT}/sse`)
})
