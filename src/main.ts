// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (process.env.NODE_ENV !== 'production') {
    import('dotenv/config')
}

import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js'
import { StreamableHTTPServerTransport } from '@modelcontextprotocol/sdk/server/streamableHttp.js'
import express from 'express'
import cors from 'cors'
import { loadAllTools } from './utils/tool-loader.js'
import { randomUUID } from 'crypto'
import { InitializeRequestSchema } from '@modelcontextprotocol/sdk/types.js'

// Create an MCP server
const server = new McpServer({
    name: 'Universal MCP Server',
    version: '1.0.0',
})

// Session management –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
const transports = new Map<string, StreamableHTTPServerTransport>()
const SESSION_ID_HEADER = 'mcp-session-id'

// –§–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
let isServerReady = false

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
async function registerAllTools() {
    console.log('üîß –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã...')
    const tools = await loadAllTools()
    
    for (const tool of tools) {
        server.registerTool(
            tool.name,
            tool.config,
            tool.handler
        )
        console.log(`üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${tool.name}`)
    }
    
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${tools.length} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`)
    isServerReady = true // –ü–æ–º–µ—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π
}

// –°–æ–∑–¥–∞–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = express()
const PORT = Number(process.env.PORT) || 8080

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CORS
app.use(
    cors({
        origin: '*',
        methods: ['GET', 'POST', 'OPTIONS'],
        allowedHeaders: ['Content-Type', 'Authorization', 'mcp-session-id'],
    }),
)

app.use(express.json())

// –û–±—Å–ª—É–∂–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
app.get('/', (req, res) => {
    res.json({
        name: 'Universal MCP Server',
        version: '1.0.0',
        status: isServerReady ? 'ready' : 'initializing',
        endpoints: {
            mcp: '/mcp',
        },
        architecture: 'Streamable HTTP',
    })
})

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å initialize
function isInitializeRequest(body: unknown): boolean {
    if (Array.isArray(body)) {
        return body.some(request => {
            const result = InitializeRequestSchema.safeParse(request)
            return result.success
        })
    }
    const result = InitializeRequestSchema.safeParse(body)
    return result.success
}

// –°–æ–∑–¥–∞–µ–º error response
function createErrorResponse(message: string, id?: string | number) {
    return {
        jsonrpc: '2.0',
        error: {
            code: -32000,
            message: message,
        },
        id: id || randomUUID(),
    }
}

// –ï–¥–∏–Ω—ã–π MCP endpoint - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏ GET –∏ POST
app.get('/mcp', async (req, res) => {
    console.log('üîó GET /mcp - –ó–∞–ø—Ä–æ—Å SSE –ø–æ—Ç–æ–∫–∞')
    
    if (!isServerReady) {
        return res.status(503).json(createErrorResponse('Server is still initializing'))
    }

    const sessionId = req.headers[SESSION_ID_HEADER] as string | undefined
    
    if (!sessionId || !transports.has(sessionId)) {
        return res.status(400).json(createErrorResponse('Invalid or missing session ID'))
    }

    try {
        const transport = transports.get(sessionId)!
        console.log(`üì° –û—Ç–∫—Ä—ã–≤–∞–µ–º SSE –ø–æ—Ç–æ–∫ –¥–ª—è —Å–µ—Å—Å–∏–∏: ${sessionId}`)
        await transport.handleRequest(req, res)
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ SSE –ø–æ—Ç–æ–∫–∞:', error)
        res.status(500).json(createErrorResponse('Failed to establish SSE stream'))
    }
})

app.post('/mcp', async (req, res) => {
    console.log('üì® POST /mcp - –û–±—Ä–∞–±–æ—Ç–∫–∞ MCP –∑–∞–ø—Ä–æ—Å–∞')
    
    if (!isServerReady) {
        return res.status(503).json(createErrorResponse('Server is still initializing'))
    }

    const sessionId = req.headers[SESSION_ID_HEADER] as string | undefined
    
    try {
        // –ï—Å–ª–∏ –µ—Å—Ç—å sessionId, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π transport
        if (sessionId && transports.has(sessionId)) {
            const transport = transports.get(sessionId)!
            console.log(`üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π transport –¥–ª—è —Å–µ—Å—Å–∏–∏: ${sessionId}`)
            await transport.handleRequest(req, res, req.body)
            return
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π transport —Ç–æ–ª—å–∫–æ –¥–ª—è initialize –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ sessionId
        if (!sessionId && isInitializeRequest(req.body)) {
            console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π transport –¥–ª—è initialize –∑–∞–ø—Ä–æ—Å–∞')
            
            const transport = new StreamableHTTPServerTransport({
                sessionIdGenerator: () => randomUUID(),
            })

            // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∫ transport
            await server.connect(transport)
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
            await transport.handleRequest(req, res, req.body)
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º transport –ø–æ sessionId (–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ handleRequest)
            const newSessionId = transport.sessionId
            if (newSessionId) {
                transports.set(newSessionId, transport)
                console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω transport –¥–ª—è —Å–µ—Å—Å–∏–∏: ${newSessionId}`)
                
                // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
                transport.onclose = () => {
                    transports.delete(newSessionId)
                    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω transport –¥–ª—è —Å–µ—Å—Å–∏–∏: ${newSessionId}`)
                }
            }
            return
        }

        // –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –Ω–µ—Ç sessionId –∏–ª–∏ –Ω–µ initialize')
        res.status(400).json(createErrorResponse('Bad Request: missing session ID or invalid method'))
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MCP –∑–∞–ø—Ä–æ—Å–∞:', error)
        res.status(500).json(createErrorResponse('Internal server error'))
    }
})

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä
async function startServer() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ Universal MCP Server...')
    
    // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    await registerAllTools()
    
    // –í Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º 0.0.0.0, –∏–Ω–∞—á–µ localhost
    const HOST = process.env.DOCKER_ENV === 'true' || process.env.NODE_ENV === 'production' ? '0.0.0.0' : 'localhost'
    
    app.listen(PORT, HOST, () => {
        console.log(`üöÄ Universal MCP Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${HOST}:${PORT}`)
        console.log(`üì° MCP endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://${HOST}:${PORT}/mcp`)
        console.log(`üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–∞—à MCP –∫–ª–∏–µ–Ω—Ç –Ω–∞: http://${HOST}:${PORT}/mcp`)
        console.log(`‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: Streamable HTTP`)
        console.log(`üìä –°—Ç–∞—Ç—É—Å: ${isServerReady ? '–ì–û–¢–û–í' : '–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø'}`)
    })
}

startServer().catch(console.error)
