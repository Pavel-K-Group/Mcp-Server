import { z } from 'zod';
import type { ToolDefinition } from '../types/tool.js';

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: +, -, *, /, %, **, (), sqrt, abs, sin, cos, tan, log, ln
 */
function safeEvaluate(expression: string): number {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
    const cleaned = expression.replace(/\s+/g, '');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    const allowedPattern = /^[0-9+\-*/().,\s%^‚àöœÄe\w]+$/;
    if (!allowedPattern.test(cleaned)) {
        throw new Error('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏');
    }
    
    // –ó–∞–º–µ–Ω—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    let processed = cleaned
        .replace(/œÄ/g, Math.PI.toString())
        .replace(/pi/g, Math.PI.toString())
        .replace(/e\b/g, Math.E.toString())
        .replace(/sqrt\(/g, 'Math.sqrt(')
        .replace(/abs\(/g, 'Math.abs(')
        .replace(/sin\(/g, 'Math.sin(')
        .replace(/cos\(/g, 'Math.cos(')
        .replace(/tan\(/g, 'Math.tan(')
        .replace(/log\(/g, 'Math.log10(')
        .replace(/ln\(/g, 'Math.log(')
        .replace(/\^/g, '**')
        .replace(/‚àö/g, 'Math.sqrt');
    
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Function constructor –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        const result = new Function('Math', `"use strict"; return (${processed})`)(Math);
        
        if (typeof result !== 'number' || !isFinite(result)) {
            throw new Error('–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º');
        }
        
        return result;
    } catch (error) {
        throw new Error(`–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: ${error instanceof Error ? error.message : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
}

export const toolDefinition: ToolDefinition = {
    name: 'calculator',
    description: '–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (+, -, *, /, %, **), —Ñ—É–Ω–∫—Ü–∏–∏ (sqrt, abs, sin, cos, tan, log, ln) –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã (œÄ, e)',
    inputSchema: {
        expression: z.string().describe('–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "2 + 2", "sqrt(16)", "sin(œÄ/2)")')
    },
    handler: async (input) => {
        try {
            const args = input as { expression: string };
            const { expression } = args;
            
            if (!expression || expression.trim() === '') {
                return {
                    content: [{
                        type: "text" as const,
                        text: "–û—à–∏–±–∫–∞: –í—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
                    }]
                };
            }
            
            const result = safeEvaluate(expression);
            
            return {
                content: [{
                    type: "text" as const,
                    text: `üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n\n–í—ã—Ä–∞–∂–µ–Ω–∏–µ: ${expression}\n–†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}\n\n${expression} = ${result}`
                }]
            };
            
        } catch (error) {
            return {
                content: [{
                    type: "text" as const,
                    text: `‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: ${error instanceof Error ? error.message : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
                }]
            };
        }
    }
}; 